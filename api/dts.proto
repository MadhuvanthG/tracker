syntax = "proto3";

package cloud.deps.dts.api;

import "github.com/deps-cloud/des/api/deps.proto";
import "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api/annotations.proto";

option go_package = "api";

enum Direction {
    DOWNSTREAM = 0;
    UPSTREAM = 1;
}

message SourceInformation {
    string url = 1;
}

message PutRequest {
    SourceInformation sourceInformation = 1;
    repeated cloud.deps.des.api.DependencyManagementFile managementFiles = 2;
}

message PutResponse {
    int32 code = 1;
    string message = 2;
}

message DependencyId {
    string language = 1;

    string organization = 5;
    string module = 6;
}

message GetManagedRequest {
    string url = 1;
}

message GetManagedResponse {
    string url = 1;
    repeated DependencyId managed = 2;
}

message Request {
    string language = 1;

    string organization = 5;
    string module = 6;
    Direction direction = 7;
}

message Response {
    DependencyId dependency = 1;
}

message TieredResponse {
    repeated DependencyId tier = 1;
}

message GetSourcesRequest {
    string language = 1; // shard (controlled)

    string organization = 5;
    string module = 6;
}

message GetSourcesResponse {
    SourceInformation source = 1;
}

message ListLanguagesRequest {

}

message ListLanguagesResponse {
    repeated string languages = 1;
}

message ListOrganizationsRequest {
    string language = 1;
}

message ListOrganizationsResponse {
    string language = 1;
    repeated string organizations = 2;
}

message ListModulesRequest {
    string language = 1;
    string organization = 2;
}

message ListModulesResponse {
    string language = 1;
    string organization = 2;
    repeated string modules = 3;
}

service DependencyTracker {
    rpc getDependencies(Request) returns (stream Response) {
        option (google.api.http) = {
            get: "/v1/dependencies"
        };
    };

    rpc put(PutRequest) returns (PutResponse) {
        option (google.api.http) = {
            post: "/v1/dependencies/track"
            body: "*"
        };
    }

    rpc getManaged(GetManagedRequest) returns (GetManagedResponse) {
        option (google.api.http) = {
            get: "/v1/dependencies/managed"
        };
    }

    rpc getTopology(Request) returns (stream Response) {
        option (google.api.http) = {
            get: "/v1/topology"
        };
    }

    rpc getTopologyTiered(Request) returns (stream TieredResponse) {
        option (google.api.http) = {
            get: "/v1/topology/tiered"
        };
    }

    rpc getSources(GetSourcesRequest) returns (stream GetSourcesResponse) {
        option (google.api.http) = {
            get: "/v1/sources"
        };
    }

    rpc listLanguages(ListLanguagesRequest) returns (ListLanguagesResponse) {
        option (google.api.http) = {
            get: "/v1/languages"
        };
    }

    rpc listOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
        option (google.api.http) = {
            get: "/v1/organizations"
        };
    }

    rpc listModules(ListModulesRequest) returns (ListModulesResponse) {
        option (google.api.http) = {
            get: "/v1/modules"
        };
    }
}
